'''Королевский двор открывает новую вакансию горничной микроволновки, которая будет разогревать блюда для королевы Елизаветы II.
Все кандидаты должны пройти несколько очень сложных тестов и обучение в буткемпе. Удачи, новобранец!

Тест тачпада.
В микроволновой печи максимальное число, которое вы можете ввести для минут или секунд, равно 99. Следовательно, время может быть представлено двумя способами:

1. используя стандартный метод, когда секунды идут только до 59,
2. используя альтернативный метод, когда секунды и минуты могут увеличиваться 99.
Хорошая горничная из микроволновки не может тратить время на ненужное перемещение пальца с одной кнопки на другую, чтобы установить таймер.

Учитывая время, необходимое для разогрева еды в секундах, вы должны вернуть строку цифр, 
которую горничная должна ввести, используя один из вышеупомянутых методов, так, 
чтобы количество различных последовательных цифр было минимальным. Если количество различий одинаковое, 
выберите более короткую строку. Если обе строки имеют одинаковую длину, используйте стандартный метод.
'''


def get_best_combination(seconds):
    if not seconds // 61: # если число меньше 60, сразу выходим
        return str(seconds)
    result_str = str(seconds // 60) + str(seconds % 60).rjust(2, "0")
    start_str = result_str
    if seconds // 60 >= 1 and seconds % 60 < 40:
        temp_res = str(seconds // 60 - 1).lstrip('0') + str(seconds % 60 + 60).rjust(2, "0")
        start_str = temp_res
    return min([result_str, start_str], key=lambda s: sum(map(str.__ne__, s, s[1:]), len(s))) 
  # две строки сравниваются в map оператором !=  (__ne__)
  # '881' -> '881' и '81' в первом сравнении false (8 == 8), во втором True. Последовательность неповторящихся символов равна 1 + 1.
  # Вместо второй единицы сразу прибавляем длиннну строки, так как это необзодимо в сравнении.
  # Таким образом из двух строк с одинаковыми последовательностями и длинной строки выберется первый ваирант.
  
